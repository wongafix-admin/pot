{"version":3,"sources":["../../src/transaction/transaction-query.js"],"names":["makeTransactionQuery","database","Object","freeze","add","findById","findByCustomerId","getTransactions","deleteByCustomerId","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToTransaction","transactionId","transaction","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","surname","othernames","email","phone","customer_id","payment_id","amount","paid_month","paid_year","bank","account_id","account_name","account_type","status","date","updateOne","upsert","found","findOne","deleteMany","n","deleteOne","deletedCount","doc"],"mappings":"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","sourcesContent":["import makeTransaction from './transaction'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeTransactionQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        findByCustomerId,\n        getTransactions,\n        deleteByCustomerId,\n        deleteById,\n        update\n    });\n\n    async function getTransactions ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Transaction')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToTransaction)\n    }\n\n\n    async function add ({ transactionId, ...transaction }) {\n        const db = await database\n        if (transactionId) {\n          transaction._id = db.makeId(transactionId)\n        }\n        const { result, ops } = await db\n          .collection('Transaction')\n          .insertOne(transaction)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                \n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToTransaction(ops[0])\n        }\n    }\n\n    async function update ({ id, ...transaction }) {\n      \n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n      const newSet = {\n        $set : {\n          surname: transaction.surname,\n          othernames: transaction.othernames,\n          email: transaction.email,\n          phone: transaction.phone,\n          customer_id: transaction.customer_id,\n          payment_id: transaction.payment_id,\n          amount: transaction.amount,\n          paid_month: transaction.paid_month,\n          paid_year: transaction.paid_year,\n          bank: transaction.bank,\n          account_id: transaction.account_id,\n          account_name: transaction.account_name,\n          account_type: transaction.account_type,\n          status: transaction.status,\n          date: transaction.date\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Transaction')\n        .updateOne(query, newSet, {upsert:true})\n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n\n    \n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Transaction')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToTransaction(found)\n    }\n    return null\n  }\n\n  async function findByCustomerId ({ customer_id }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Transaction')\n      .find({ customer_id: customer_id })\n      .toArray()).map(documentToTransaction)\n  }\n\n  async function deleteByCustomerId ({ customer_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Transaction').deleteMany({\"customer_id\": customer_id})\n    return {\n      success: result.n\n    }\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Transaction').deleteOne({\"_id\": db.makeId(id)})\n    if (result.deletedCount > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToTransaction ({ _id: id, ...doc }) {\n    return makeTransaction({ id, ...doc })\n  }\n}"],"file":"transaction-query.js"}