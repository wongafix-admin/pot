{"version":3,"sources":["../../src/transaction/transaction-endpoint.js"],"names":["makeTransactionEndpointHandler","transactionQuery","handle","httpRequest","method","postTransaction","getTransaction","updateTransaction","statusCode","errorMessage","id","queryParams","customer_id","max","before","after","undefined","result","findByCustomerId","headers","data","JSON","stringify","findById","getTransactions","transactionInfo","body","parse","transaction","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeTransaction from './transaction';\n\nexport default function makeTransactionEndpointHandler({transactionQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postTransaction(httpRequest)\n      \n            case 'GET':\n              return getTransaction(httpRequest)\n\n            case 'PUT':\n                return updateTransaction(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getTransaction (httpRequest) {\n\n      const { id } = httpRequest.queryParams || {}\n      const { customer_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (customer_id !== undefined ){\n        \n        const result = await transactionQuery.findByCustomerId({ customer_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        \n        const result = await transactionQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await transactionQuery.getTransactions({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n\n        \n    }\n\n\n    async function postTransaction (httpRequest) {\n        let transactionInfo = httpRequest.body\n        if (!transactionInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            transactionInfo = JSON.parse(transactionInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const transaction = makeTransaction(transactionInfo)\n          const result = await transactionQuery.add(transaction)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function updateTransaction (httpRequest) {\n        let transactionInfo = httpRequest.body\n        if (!transactionInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            transactionInfo = JSON.parse(transactionInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const transaction = makeTransaction(transactionInfo)\n          const result = await transactionQuery.update(transaction)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n}"],"file":"transaction-endpoint.js"}