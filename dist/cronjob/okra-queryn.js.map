{"version":3,"sources":["../../src/cronjob/okra-queryn.js"],"names":["fetch","require","okraCrons","database","dd","Date","today","getDate","sDay","eDay","getDeals","db","deals","collection","find","loan_due_date","$gt","$lt","pay_status","status","$not","toArray","deal","accounts","customer_id","account","nAccount","account_id","balance","method","headers","Accept","Authorization","body","JSON","stringify","balRes","json","timeout","balance_callback","callback_url","callbackRes","available_balance","loan_monthly_payable","pay","account_to_debit","amount","currency","payRes","monthNames","d","trans","surname","othernames","email","phone","payment_id","data","payment","id","paid_month","getMonth","paid_year","getFullYear","bank","account_name","account_type","date","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","query","_id","makeId","newSet","$set","loan_amount","last_month_paid","last_year_paid","office","office_phone","office_email","guarantor_name","guarantor_home_address","guarantor_office_address","guarantor_phone","guarantor_monthly_income","guarantor_collateral","salary_bank","num_account","upload_id_card","updateOne","upsert","ms","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import makeHttpError from '../helpers/http-error';\nimport Okra from 'okra-js';\n\nimport makeDb from '../db';\n\nconst fetch = require('node-fetch');\n\n\nexport default function okraCrons () {\n    \n  const database = makeDb();\n\n    //get the deal for the defaulters\n    //check the account associated with each deal for more than amount\n    //initiate payment on account\n    //register transaction\n    const dd = new Date();\n    const today = dd.getDate();\n    const sDay = today - 2;\n    const eDay = today + 5;\n\n    getDeals();\n\n    async function getDeals(){\n\n      const db = await database;\n      \n        const deals = await db\n                .collection('Deal')\n                .find({loan_due_date: { $gt : sDay , $lt : eDay } }, {pay_status: 'Unpaid'}, {status: {$not: 'Completed'}})\n                .toArray();\n\n        \n        for (const deal of deals) {\n          const accounts = await db.collection('Account')\n                          .find({customer_id: deal.customer_id})\n                          .toArray();\n\n          for (const account of accounts){\n            //okra check balance\n            // data to be sent to the POST request\n            const nAccount = {\n              account_id: account.account_id\n            }\n            \n            const balance = await fetch('https://api.okra.ng/v2/balance/refresh', {\n                                    method: 'POST',\n                                    headers: {\n                                      Accept: 'application/json; charset=utf-8',\n                                      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDc2ZWU3Mjc4ZGUwZjExZDVkMWJlMGIiLCJpYXQiOjE2MTg0MDcwMjd9.Q-R0qocVPKnCZHtpGigsTtoN-MVlUIhZ9LsSrW7VCsM',\n                                      'Content-Type': 'application/json'\n                                    },\n                                    body: JSON.stringify(nAccount)\n                                  })\n\n            const balRes = await balance.json();\n            await timeout(6000);\n\n            const balance_callback = await fetch(balRes.callback_url, {\n                                            method: 'POST',\n                                            headers: {\n                                              Accept: 'application/json; charset=utf-8',\n                                              Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDc2ZWU3Mjc4ZGUwZjExZDVkMWJlMGIiLCJpYXQiOjE2MTg0MDcwMjd9.Q-R0qocVPKnCZHtpGigsTtoN-MVlUIhZ9LsSrW7VCsM',\n                                              'Content-Type': 'application/json'\n                                            }\n                                          })\n\n            const callbackRes = await balance_callback.json();\n\n            if (callbackRes.available_balance >= deal.loan_monthly_payable){\n\n              const pay = await fetch('https://api.okra.ng/v2/pay/initiate', {\n                          method: 'POST',\n                          headers: {\n                            Accept: 'application/json; charset=utf-8',\n                            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDc2ZWU3Mjc4ZGUwZjExZDVkMWJlMGIiLCJpYXQiOjE2MTg0MDcwMjd9.Q-R0qocVPKnCZHtpGigsTtoN-MVlUIhZ9LsSrW7VCsM',\n                            'Content-Type': 'application/json'\n                          },\n                          body: JSON.stringify({\n                            account_to_debit: account.account_id, \n                            amount: deal.loan_monthly_payable * 1000, \n                            currency: 'NGN'\n                          })\n                        })\n              const payRes = await pay.json();\n\n              //create transaction in db\n\n              const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n              const d = new Date();\n\n              const trans = {\n\n                surname: deal.surname,\n                othernames: deal.othernames,\n                email: deal.email,\n                phone: deal.phone,\n                customer_id: deal.customer_id,\n                payment_id: payRes.data.payment.id,\n                amount: deal.loan_monthly_payable,\n                paid_month: monthNames[d.getMonth()],\n                paid_year: d.getFullYear(),\n                bank: account.bank,\n                account_id: account.account_id,\n                account_name: account.account_name,\n                account_type: account.account_type,\n                status: 'Paid',\n                date: new Date\n\n              }\n\n              await db.collection('Transaction')\n                    .insertOne(trans)\n                    .catch(mongoError => {\n                      const [errorCode] = mongoError.message.split(' ')\n                      if (errorCode === 'E11000') {\n                        const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n                        throw new UniqueConstraintError(\n                          \n                        )\n                      }\n                      throw mongoError\n                    });\n\n              \n              const query = {\n                _id: db.makeId(id)\n              }\n              \n              const newSet = {\n                $set : {\n      \n                  surname: deal.surname,\n                  othernames: deal.othernames,\n                  customer_id: deal.customer_id,\n                  phone: deal.phone,\n                  email: deal.email,\n                  loan_amount: deal.loan_amount,\n                  loan_monthly_payable: deal.loan_monthly_payable,\n                  loan_due_date: deal.loan_due_date,\n                  last_month_paid: deal.last_month_paid,\n                  last_year_paid: deal.last_year_paid,\n      \n                  office: deal.office,\n                  office_phone: deal.office_phone,\n                  office_email: deal.office_email, \n                  \n                  guarantor_name: deal.guarantor_name,\n                  guarantor_home_address: deal.guarantor_home_address,\n                  guarantor_office_address: deal.guarantor_office_address,\n                  guarantor_phone: deal.guarantor_phone,\n                  guarantor_monthly_income: deal.guarantor_monthly_income,\n                  guarantor_collateral: deal.guarantor_collateral,\n                  \n                  salary_bank: deal.salary_bank,\n                  num_account: deal.num_account,\n      \n                  upload_id_card: deal.upload_id_card,\n      \n                  pay_status: \"Paid\",\n                  status: deal.status,\n                  date: deal.date\n                } \n              }\n\n              await db\n                .collection('Deal')\n                .updateOne(query, newSet, {upsert:true});\n\n              break;\n            }\n\n          }\n        }\n\n    }\n    \n\n    function timeout(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    \n}"],"file":"okra-queryn.js"}