{"version":3,"sources":["../../src/cronjob/cron-endpoint.js"],"names":["schedule","require","makeCronEndpointHandler","dbQuery","okraQuery","handle","httpRequest","method","getCronJob","statusCode","errorMessage","start","queryParams","end","undefined","result","setMakePayment","headers","data","JSON","stringify","cancelJob","console","log","status","dd","Date","monthNames","month","getMonth","today","getDate","sDay","eDay","pay_status","condition","deals","getDeals","counter","deal","customer_id","accounts","getAccountByCustomerId","account","nAccount","account_id","balance","balanceRefresh","balRes","json","timeout","callback_url","balance_callback","balanceCallback","callbackRes","available_balance","loan_monthly_payable","nPay","account_to_debit","amount","currency","pay","payInitiate","payRes","d","transx","surname","othernames","email","phone","payment_id","payment","id","paid_month","paid_year","getFullYear","bank","account_name","account_type","date","addTransaction","updateDeal","length","ms","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import makeHttpError from '../helpers/http-error';\n\nconst schedule = require('node-schedule');\n\nexport default function makeCronEndpointHandler({dbQuery, okraQuery}){\n  return async function handle(httpRequest){\n      switch (httpRequest.method) {\n          \n          case 'GET':\n            return getCronJob(httpRequest)\n\n          default:\n            return makeHttpError({\n              statusCode: 405,\n              errorMessage: `${httpRequest.method} method not allowed.`\n            })\n      }\n  }\n\n  async function getCronJob (httpRequest) {\n\n    const { start } = httpRequest.queryParams || {}\n    const { end } = httpRequest.queryParams || {}\n\n    if (start !== undefined ){\n      //var payJob = schedule.scheduleJob('paycron', '*/5 * * * * *', ()=>{\n      //  setMakePayment ();\n      //});\n\n      const result = await setMakePayment();\n      \n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n\n    }\n    else {\n      \n      schedule.cancelJob('paycron');\n      console.log(\"Cron cancelled\");\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        status: \"success\"\n      }\n\n    }\n      \n  }\n  \n\n  async function setMakePayment () {\n\n    //const account_id = \"60ec491c12e3c4c9a4023980\";\n    //const result = await okraQuery.balanceRefresh({account_id});\n\n    //console.log(\"endpoint result: \"+JSON.stringify(result));\n\n    const dd = new Date();\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n   \n    const month = monthNames[dd.getMonth()];\n    \n    var today = dd.getDate();\n    var sDay = today - 2;\n    var eDay = today + 3;\n    var pay_status = \"Unpaid\";\n    var status = \"Completed\";\n\n    var condition;\n\n    if (sDay < 0){\n      eDay = eDay + 1;\n      sDay = 1;\n      \n    }\n\n    if (month == 'February'){\n      if (eDay > 28){\n        condition = 'Abnormal_28';\n        eDay = eDay - 28;\n      }\n      else {\n        condition = 'Normal';\n      }\n    }\n    else if (month == 'June' || month == 'April' || month == 'September' || month == 'November'){\n      if (eDay > 30){\n        condition = 'Abnormal_30';\n        eDay = eDay - 30;\n      }\n      else {\n        condition = 'Normal';\n      }\n    }\n    else {\n      if (eDay > 31){\n        condition = 'Abnormal_31';\n        eDay = eDay - 31;\n      }\n      else {\n        condition = 'Normal';\n      }\n    }\n\n\n    const deals = await dbQuery.getDeals({ sDay, eDay, pay_status, status, condition });\n    //return deals;\n    console.log(deals);\n    var counter = 0;\n    for (const deal of deals) {\n\n      counter++;\n      const customer_id = deal.customer_id;\n      const accounts = await dbQuery.getAccountByCustomerId({ customer_id });\n\n      for (const account of accounts){\n\n        const nAccount = {\n          account_id: account.account_id\n        }\n\n        const balance = await okraQuery.balanceRefresh({nAccount});\n        const balRes = await balance.json();\n        await timeout(6000);\n\n        const callback_url = balRes.callback_url;\n\n        const balance_callback = await okraQuery.balanceCallback({ callback_url });\n\n        const callbackRes = await balance_callback.json();\n\n        if (callbackRes.available_balance >= deal.loan_monthly_payable){\n\n          const nPay = {\n            account_to_debit: account.account_id,\n            amount: deal.loan_monthly_payable * 1000,\n            currency: 'NGN'\n          }\n\n          const pay = await okraQuery.payInitiate({ nPay });\n          const payRes = await pay.json();\n\n          const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n          const d = new Date();\n\n          const transx = {\n\n            surname: deal.surname,\n            othernames: deal.othernames,\n            email: deal.email,\n            phone: deal.phone,\n            customer_id: deal.customer_id,\n            payment_id: payRes.data.payment.id,\n            amount: deal.loan_monthly_payable,\n            paid_month: monthNames[d.getMonth()],\n            paid_year: d.getFullYear(),\n            bank: account.bank,\n            account_id: account.account_id,\n            account_name: account.account_name,\n            account_type: account.account_type,\n            status: 'Paid',\n            date: new Date\n\n          }\n\n          await okraQuery.addTransaction({ transx });\n\n          await okraQuery.updateDeal({ deal });\n\n          break;\n        }\n\n      }\n\n      if (deals.length == counter){\n        console.log(deals.length);\n        console.log(counter);\n        return {\n          statusCode: 200,\n          status: \"success\"\n        }\n      }\n    } \n\n    if (deals.length == 0){\n      console.log(deals.length);\n      console.log(counter);\n      return {\n        statusCode: 200,\n        status: \"success\"\n      }\n    }\n\n  }\n\n  function timeout(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n\n}"],"file":"cron-endpoint.js"}