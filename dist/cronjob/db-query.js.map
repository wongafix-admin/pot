{"version":3,"sources":["../../src/cronjob/db-query.js"],"names":["makeDbQuery","database","Object","freeze","getDeals","getAccountByCustomerId","addTransaction","updateDeal","sDay","eDay","pay_status","status","condition","console","log","db","collection","find","loan_due_date","$gt","$lt","$not","toArray","eDate","customer_id","transId","transaction","trans","_id","makeId","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","deals","query","newSet","$set","surname","othernames","phone","email","loan_amount","loan_monthly_payable","loan_duration","last_month_paid","last_year_paid","office","office_phone","office_email","guarantor_name","guarantor_home_address","guarantor_office_address","guarantor_phone","guarantor_monthly_income","guarantor_collateral","salary_bank","num_account","upload_id_card","date","updateOne","upsert"],"mappings":"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","sourcesContent":["import { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeDbQuery({database}){\n    return Object.freeze({\n      getDeals,\n      getAccountByCustomerId,\n      addTransaction,\n      updateDeal\n    });\n\n    async function getDeals ({ sDay, eDay, pay_status, status, condition } = {}) {\n      console.log(\"Start day: \"+sDay);\n      console.log(\"End day: \"+eDay);\n        const db = await database;\n       \n        if (condition == 'Abnormal_28'){\n          return (await db\n            .collection('Deal')\n            .find({loan_due_date: { $gt : sDay , $lt : 29 } }, {loan_due_date: { $gt : 0, $lt : eDay } }, {pay_status: pay_status}, {status: {$not: status}})\n            .toArray())\n        }\n        else if (condition == 'Abnormal_30'){\n          return (await db\n            .collection('Deal')\n            .find({loan_due_date: { $gt : sDay , $lt : 31 } }, {loan_due_date: { $gt : 0, $lt : eDay } }, {pay_status: pay_status}, {status: {$not: status}})\n            .toArray())\n        }\n        else if (condition == 'Abnormal_31'){\n          return (await db\n            .collection('Deal')\n            .find({loan_due_date: { $gt : sDay , $lt : 32 } }, {loan_due_date: { $gt : 0, $lt : eDay } }, {pay_status: pay_status}, {status: {$not: status}})\n            .toArray())\n        }\n        else {\n          return (await db\n            .collection('Deal')\n            .find({loan_due_date: { $gt : sDay , $lt : eDate } }, {pay_status: pay_status}, {status: {$not: status}})\n            .toArray())\n        }\n    }\n\n    async function getAccountByCustomerId ({ customer_id }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Account')\n        .find({ customer_id: customer_id })\n        .toArray())\n    }\n\n\n\n    async function addTransaction({ transId, ...transaction }) {\n        const db = await database\n        if (transId) {\n          trans._id = db.makeId(transId)\n        }\n        const { result, ops } = await db\n          .collection('Transaction')\n          .insertOne(transaction)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: true\n        }\n    }\n\n    async function updateDeal ({ id, ...deals }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n        const newSet = {\n          $set : {\n\n            surname: deals.surname,\n            othernames: deals.othernames,\n            customer_id: deals.customer_id,\n            phone: deals.phone,\n            email: deals.email,\n            loan_amount: deals.loan_amount,\n            loan_monthly_payable: deals.loan_monthly_payable,\n            loan_duration: deals.loan_duration,\n            loan_due_date: deals.loan_due_date,\n            last_month_paid: deals.last_month_paid,\n            last_year_paid: deals.last_year_paid,\n\n            office: deals.office,\n            office_phone: deals.office_phone,\n            office_email: deals.office_email, \n            \n            guarantor_name: deals.guarantor_name,\n            guarantor_home_address: deals.guarantor_home_address,\n            guarantor_office_address: deals.guarantor_office_address,\n            guarantor_phone: deals.guarantor_phone,\n            guarantor_monthly_income: deals.guarantor_monthly_income,\n            guarantor_collateral: deals.guarantor_collateral,\n            \n            salary_bank: deals.salary_bank,\n            num_account: deals.num_account,\n\n            upload_id_card: deals.upload_id_card,\n\n            pay_status: deals.pay_status,\n            status: deals.status,\n            date: deals.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Deal')\n          .updateOne(query, newSet, {upsert:true})\n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n  /*async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Deal')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToDeal(found)\n    }\n    return null\n  }\n\n  \n\n  async function deleteByCustomerId ({ customer_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Deal').deleteMany({\"customer_id\": customer_id})\n    return {\n      success: result.n\n    }\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Deal').deleteOne({\"_id\": db.makeId(id)})\n    console.log(result);\n    if (result.deletedCount > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToDeal ({ _id: id, ...doc }) {\n    return makeDeal({ id, ...doc })\n  }*/\n\n}"],"file":"db-query.js"}