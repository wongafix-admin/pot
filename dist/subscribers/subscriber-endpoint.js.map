{"version":3,"sources":["../../src/subscribers/subscriber-endpoint.js"],"names":["makeSubscribersEndpointHandler","subscribersQuery","handle","httpRequest","method","postSubscribers","getSubscribers","updateSubscribers","statusCode","errorMessage","id","queryParams","phone","customer_id","max","before","after","undefined","console","log","result","findByPhone","headers","data","JSON","stringify","findByCustomerId","findById","subscribersInfo","body","parse","path","verify","subscribers","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeSubscribers from './subscriber';\n\nexport default function makeSubscribersEndpointHandler({subscribersQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postSubscribers(httpRequest)\n      \n            case 'GET':\n              return getSubscribers(httpRequest)\n\n            case 'PUT':\n                return updateSubscribers(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getSubscribers (httpRequest) {\n     \n      //const { id } = httpRequest.pathParams || {}\n      const { id } = httpRequest.queryParams || {}\n      const { phone } = httpRequest.queryParams || {}\n      const { customer_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (phone !== undefined){\n        console.log(\"phone called\");\n        const result = await subscribersQuery.findByPhone({ phone })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (customer_id !== undefined ){\n        console.log(\"idcustomer id called: \"+customer_id);\n        const result = await subscribersQuery.findByCustomerId({ customer_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        console.log(\"Id called: \"+id);\n        const result = await subscribersQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await subscribersQuery.getSubscribers({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n\n\n      \n        /*const result = id\n            ? await subscribersQuery.findById({ subscribersId: id })\n            : await subscribersQuery.getSubscribers({ max, before, after })\n\n            return {\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              statusCode: 200,\n              data: JSON.stringify(result)\n            }*/\n        \n    }\n\n    async function postSubscribers (httpRequest) {\n        let subscribersInfo = httpRequest.body\n        if (!subscribersInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            subscribersInfo = JSON.parse(subscribersInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          if (httpRequest.path == '/subscriber/verify'){\n            //const subscribers = makeSubscribers(subscribersInfo)\n            const result = await subscribersQuery.verify(subscribersInfo) \n            return {\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              statusCode: 201,\n              data: JSON.stringify(result)\n            }\n          }\n          else {\n            //console.log(httpRequest.body);\n            const subscribers = makeSubscribers(subscribersInfo)\n            const result = await subscribersQuery.add(subscribers)\n            return {\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              statusCode: 201,\n              data: JSON.stringify(result)\n            }\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function updateSubscribers (httpRequest) {\n        console.log(\"Subscribers update endpoint\");\n        let subscribersInfo = httpRequest.body\n        if (!subscribersInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            subscribersInfo = JSON.parse(subscribersInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const subscribers = makeSubscribers(subscribersInfo);\n          const result = await subscribersQuery.update(subscribers)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n}"],"file":"subscriber-endpoint.js"}