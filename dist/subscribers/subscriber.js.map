{"version":3,"sources":["../../src/subscribers/subscriber.js"],"names":["makeSubscriber","subscriberInfo","console","log","validSubscriber","validate","normalSubscriber","normalize","Object","freeze","surname","othernames","loan_amount","email","office_email","otherInfo","validateEmail","validateName","label","name","length","InvalidPropertyError","office","guarantor_name"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEe,SAASA,cAAT,CACXC,cAAc,GAAG,4BAAc,gBAAd,CADN,EAEd;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACE,QAAMC,eAAe,GAAGC,QAAQ,CAACJ,cAAD,CAAhC;AACA,QAAMK,gBAAgB,GAAGC,SAAS,CAACH,eAAD,CAAlC;AACA,SAAOI,MAAM,CAACC,MAAP,CAAcH,gBAAd,CAAP;;AAGA,WAASD,QAAT,CAAmB;AAEfK,IAAAA,OAAO,GAAG,4BAAc,SAAd,CAFK;AAGfC,IAAAA,UAAU,GAAG,4BAAc,YAAd,CAHE;AAIfC,IAAAA,WAAW,GAAG,4BAAc,aAAd,CAJC;;AAKf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOQC,IAAAA,KAnCe;AAoCfC,IAAAA,YApCe;AAqCf,OAAGC;AArCY,MAsCb,EAtCN,EAsCU;AAEN;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AAGQ,QAAIF,KAAK,KAAK,KAAd,EAAoB;AAClBG,MAAAA,aAAa,CAACH,KAAD,CAAb;AACD;;AAED,QAAIC,YAAY,KAAK,KAArB,EAA2B;AACzBE,MAAAA,aAAa,CAACF,YAAD,CAAb;AACD;;AACDZ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,WAAO;AAAEU,MAAAA,KAAF;AAASD,MAAAA,WAAT;AAAsBE,MAAAA,YAAtB;AAAoCJ,MAAAA,OAApC;AAA6CC,MAAAA,UAA7C;AAAyD,SAAGI;AAA5D,KAAP;AACD;;AAED,WAASE,YAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AAClC,QAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACnB,YAAM,IAAIC,4BAAJ,CACH,gBAAeH,KAAM,sCADlB,CAAN;AAGD;AACF;;AAED,WAASF,aAAT,CAAuBH,KAAvB,EAA6B;AAC3B,QAAI,CAAC,2BAAaA,KAAb,CAAL,EAA0B;AACtB,YAAM,IAAIQ,4BAAJ,CAAyB,wBAAzB,CAAN;AACH;AACF;;AAED,WAASd,SAAT,CAAoB;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBW,IAAAA,MAAvB;AAA+BC,IAAAA,cAA/B;AAA+C,OAAGR;AAAlD,GAApB,EAAmF;AACjFb,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAO,EACL,GAAGY,SADE;AAELL,MAAAA,OAAO,EAAE,yBAAWA,OAAX,CAFJ;AAGLC,MAAAA,UAAU,EAAE,yBAAWA,UAAX,CAHP;AAILW,MAAAA,MAAM,EAAE,yBAAWA,MAAX,CAJH;AAKLC,MAAAA,cAAc,EAAE,yBAAWA,cAAX;AALX,KAAP;AAOD;AACN","sourcesContent":["import requiredParam from '../helpers/required-param';\nimport { InvalidPropertyError } from '../helpers/errors';\nimport isValidEmail from '../helpers/is-valid-email.js';\nimport upperFirst from '../helpers/upper-first';\n\nexport default function makeSubscriber(\n    subscriberInfo = requiredParam('subscriberInfo')\n){\n  console.log(\"make subscriber\");\n    const validSubscriber = validate(subscriberInfo);\n    const normalSubscriber = normalize(validSubscriber);\n    return Object.freeze(normalSubscriber);\n\n  \n    function validate ({\n      \n        surname = requiredParam('surname'),\n        othernames = requiredParam('othernames'),\n        loan_amount = requiredParam('loan_amount'),\n        /*gender = requiredParam('gender'),\n        bday = requiredParam('bday'),\n        bmonth = requiredParam('bmonth'),\n        byear = requiredParam('byear'),\n        phone = requiredParam('phone'),\n        address = requiredParam('address'),\n    \n        office = requiredParam('office'),\n        office_phone = requiredParam('office_phone'),\n        office_income = requiredParam('office_income'),\n        office_payday = requiredParam('office_payday'),\n    \n        loan_amount = requiredParam('loan_amount'),\n        loan_purpose = requiredParam('loan_purpose'),\n    \n        guarantor_name = requiredParam('guarantor_name'),\n        guarantor_home_address = requiredParam('guarantor_home_address'),\n        guarantor_office_address = requiredParam('guarantor_office_address'),\n        guarantor_phone = requiredParam('guarantor_phone'),\n        guarantor_monthly_income = requiredParam('guarantor_monthly_income'),\n        guarantor_collateral = requiredParam('guarantor_collateral'),\n\n        okra_customer_id = requiredParam('okra_customer_id'), \n        okra_salary_bank = requiredParam('okra_salary_bank'), \n        okra_num_account = requiredParam('okra_num_account'), \n        num_deal = requiredParam('num_deal'), \n    \n        upload_id_card = requiredParam('upload_id_card'),\n        reg_status = requiredParam('reg_status'),*/\n      \n        email,\n        office_email,\n        ...otherInfo\n      } = {}) {\n        \n        /*validateName('surname', surname);\n        validateName('othernames', othernames);\n        validateName('office', office);\n        validateName('loan_purpose', loan_purpose);\n        validateName('guarantor_name', guartantor_name);\n        validateName('guarantor_home_address', guarantor_home_address);\n        validateName('guarantor_office_address', guarantor_office_address);\n        validateName('guarantor_collateral', guarantor_collateral);*/\n\n       \n        if (email !== 'Nil'){\n          validateEmail(email);\n        }\n        \n        if (office_email !== 'Nil'){\n          validateEmail(office_email);\n        }\n        console.log(\"validate subscriber\");\n        return { email, loan_amount, office_email, surname, othernames, ...otherInfo }\n      }\n    \n      function validateName (label, name) {\n        if (name.length < 2) {\n          throw new InvalidPropertyError(\n            `Subscriber's ${label} must be at least 2 characters long.`\n          )\n        }\n      }\n\n      function validateEmail(email){\n        if (!isValidEmail(email)) {\n            throw new InvalidPropertyError('Invalid email address.')\n        }\n      }\n\n      function normalize ({ surname, othernames, office, guarantor_name, ...otherInfo }) {\n        console.log(\"Normalize subscriber\");\n        return {\n          ...otherInfo,\n          surname: upperFirst(surname),\n          othernames: upperFirst(othernames),\n          office: upperFirst(office),\n          guarantor_name: upperFirst(guarantor_name)\n        }\n      }\n}\n"],"file":"subscriber.js"}