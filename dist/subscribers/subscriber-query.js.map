{"version":3,"sources":["../../src/subscribers/subscriber-query.js"],"names":["makeSubscribersQuery","database","Object","freeze","add","verify","findById","findByPhone","findByCustomerId","getSubscribers","deleteByCustomerId","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToSubscribers","subscribersId","subscribers","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","surname","phone","email","found","findOne","db2","found2","status","id","console","log","newSet","$set","othernames","gender","bday","bmonth","byear","address","office_income","office_email","office_phone","office","office_payday","loan_amount","loan_purpose","loan_type","loan_duration","guarantor_name","guarantor_home_address","guarantor_office_address","guarantor_phone","guarantor_monthly_income","guarantor_collateral","okra_customer_id","okra_salary_bank","okra_num_account","num_deal","upload_id_card","upload_picture","reg_status","offer_letter","date","updateOne","upsert","customer_id","deleteMany","n","doc"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,SAASA,oBAAT,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAA0C;AACrD,SAAOC,MAAM,CAACC,MAAP,CAAe;AAClBC,IAAAA,GADkB;AAElBC,IAAAA,MAFkB;AAGlBC,IAAAA,QAHkB;AAIlBC,IAAAA,WAJkB;AAKlBC,IAAAA,gBALkB;AAMlBC,IAAAA,cANkB;AAOlBC,IAAAA,kBAPkB;AAQlBC,IAAAA;AARkB,GAAf,CAAP;;AAWA,iBAAeF,cAAf,CAA+B;AAAEG,IAAAA,GAAG,GAAG,GAAR;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,MAA+B,EAA9D,EAAkE;AAC9D,UAAMC,EAAE,GAAG,MAAMd,QAAjB;AACA,UAAMe,KAAK,GAAG,EAAd;;AACA,QAAIH,MAAM,IAAIC,KAAd,EAAqB;AACrBE,MAAAA,KAAK,CAACC,GAAN,GAAY,EAAZ;AACAD,MAAAA,KAAK,CAACC,GAAN,GAAYJ,MAAM,GAAG,EAAE,GAAGG,KAAK,CAACC,GAAX;AAAgBC,QAAAA,GAAG,EAAEH,EAAE,CAACI,MAAH,CAAUN,MAAV;AAArB,OAAH,GAA8CG,KAAK,CAACC,GAAtE;AACAD,MAAAA,KAAK,CAACC,GAAN,GAAYH,KAAK,GAAG,EAAE,GAAGE,KAAK,CAACC,GAAX;AAAgBG,QAAAA,GAAG,EAAEL,EAAE,CAACI,MAAH,CAAUL,KAAV;AAArB,OAAH,GAA6CE,KAAK,CAACC,GAApE;AACC;;AAED,WAAO,CAAC,MAAMF,EAAE,CACfM,UADa,CACF,aADE,EAEbC,IAFa,CAERN,KAFQ,EAGbO,KAHa,CAGPC,MAAM,CAACZ,GAAD,CAHC,EAIba,OAJa,EAAP,EAIKC,GAJL,CAISC,qBAJT,CAAP;AAKH;;AAGD,iBAAevB,GAAf,CAAoB;AAAEwB,IAAAA,aAAF;AAAiB,OAAGC;AAApB,GAApB,EAAuD;AACnD,UAAMd,EAAE,GAAG,MAAMd,QAAjB;;AACA,QAAI2B,aAAJ,EAAmB;AACjBC,MAAAA,WAAW,CAACZ,GAAZ,GAAkBF,EAAE,CAACI,MAAH,CAAUS,aAAV,CAAlB;AACD;;AACD,UAAM;AAAEE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAkB,MAAMhB,EAAE,CAC7BM,UAD2B,CAChB,aADgB,EAE3BW,SAF2B,CAEjBH,WAFiB,EAG3BI,KAH2B,CAGrBC,UAAU,IAAI;AACnB,YAAM,CAACC,SAAD,IAAcD,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,CAApB;;AACA,UAAIF,SAAS,KAAK,QAAlB,EAA4B;AAC1B,cAAM,CAACG,CAAD,EAAIC,UAAJ,IAAkBL,UAAU,CAACE,OAAX,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiCA,KAAjC,CAAuC,GAAvC,CAAxB;AACA,cAAM,IAAIG,6BAAJ,EAAN;AAGD;;AACD,YAAMN,UAAN;AACD,KAZ2B,CAA9B;AAaA,WAAO;AACHO,MAAAA,OAAO,EAAEX,MAAM,CAACY,EAAP,KAAc,CADpB;AAEHC,MAAAA,OAAO,EAAEhB,qBAAqB,CAACI,GAAG,CAAC,CAAD,CAAJ;AAF3B,KAAP;AAIH;;AAEH,iBAAe1B,MAAf,CAAuB;AAAEuC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAvB,EAAkD;AAChD,UAAM/B,EAAE,GAAG,MAAMd,QAAjB;AACA,UAAM8C,KAAK,GAAG,MAAMhC,EAAE,CACnBM,UADiB,CACN,aADM,EAEjB2B,OAFiB,CAET;AAAEH,MAAAA,KAAK,EAACA;AAAR,KAFS,CAApB;;AAKA,QAAIE,KAAJ,EAAW;AAET,YAAME,GAAG,GAAG,MAAMhD,QAAlB;AACA,YAAMiD,MAAM,GAAG,MAAMD,GAAG,CACrB5B,UADkB,CACP,aADO,EAElB2B,OAFkB,CAEV;AAAEJ,QAAAA,OAAO,EAACA;AAAV,OAFU,CAArB;;AAIE,UAAIM,MAAJ,EAAY;AACV,8BAAQ,sCAAR,EAAgD,aAAhD;AACA,eAAO;AACLC,UAAAA,MAAM,EAAE,SADH;AAELf,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAKD,OAPD,MAOO;AAEL,eAAO;AACLe,UAAAA,MAAM,EAAE,kBADH;AAELf,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAKD;AACJ,KAtBD,MAsBM;AAEJ,aAAO;AACLe,QAAAA,MAAM,EAAE,gBADH;AAELf,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAKD;AACF;;AAGC,iBAAezB,MAAf,CAAuB;AAAEyC,IAAAA,EAAF;AAAM,OAAGvB;AAAT,GAAvB,EAA+C;AAC7CwB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAuBF,EAAnC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYzB,WAAZ;AACE,UAAMd,EAAE,GAAG,MAAMd,QAAjB;AACA,UAAMe,KAAK,GAAG;AACZC,MAAAA,GAAG,EAAEF,EAAE,CAACI,MAAH,CAAUiC,EAAV;AADO,KAAd;AAKA,UAAMG,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAG;AACLZ,QAAAA,OAAO,EAAEf,WAAW,CAACe,OADhB;AAELa,QAAAA,UAAU,EAAE5B,WAAW,CAAC4B,UAFnB;AAGLC,QAAAA,MAAM,EAAE7B,WAAW,CAAC6B,MAHf;AAILC,QAAAA,IAAI,EAAE9B,WAAW,CAAC8B,IAJb;AAKLC,QAAAA,MAAM,EAAE/B,WAAW,CAAC+B,MALf;AAMLC,QAAAA,KAAK,EAAEhC,WAAW,CAACgC,KANd;AAOLf,QAAAA,KAAK,EAAEjB,WAAW,CAACiB,KAPd;AAQLD,QAAAA,KAAK,EAAEhB,WAAW,CAACgB,KARd;AASLM,QAAAA,MAAM,EAAEtB,WAAW,CAACsB,MATf;AAULW,QAAAA,OAAO,EAAEjC,WAAW,CAACiC,OAVhB;AAYLC,QAAAA,aAAa,EAAElC,WAAW,CAACkC,aAZtB;AAaLC,QAAAA,YAAY,EAAEnC,WAAW,CAACmC,YAbrB;AAcLC,QAAAA,YAAY,EAAEpC,WAAW,CAACoC,YAdrB;AAeLC,QAAAA,MAAM,EAAErC,WAAW,CAACqC,MAff;AAgBLC,QAAAA,aAAa,EAAEtC,WAAW,CAACsC,aAhBtB;AAkBLC,QAAAA,WAAW,EAAEvC,WAAW,CAACuC,WAlBpB;AAmBLC,QAAAA,YAAY,EAAExC,WAAW,CAACwC,YAnBrB;AAoBLC,QAAAA,SAAS,EAAEzC,WAAW,CAACyC,SApBlB;AAqBLC,QAAAA,aAAa,EAAE1C,WAAW,CAAC0C,aArBtB;AAuBLC,QAAAA,cAAc,EAAE3C,WAAW,CAAC2C,cAvBvB;AAwBLC,QAAAA,sBAAsB,EAAE5C,WAAW,CAAC4C,sBAxB/B;AAyBLC,QAAAA,wBAAwB,EAAE7C,WAAW,CAAC6C,wBAzBjC;AA0BLC,QAAAA,eAAe,EAAE9C,WAAW,CAAC8C,eA1BxB;AA2BLC,QAAAA,wBAAwB,EAAE/C,WAAW,CAAC+C,wBA3BjC;AA4BLC,QAAAA,oBAAoB,EAAEhD,WAAW,CAACgD,oBA5B7B;AA8BLC,QAAAA,gBAAgB,EAAEjD,WAAW,CAACiD,gBA9BzB;AA+BLC,QAAAA,gBAAgB,EAAElD,WAAW,CAACkD,gBA/BzB;AAgCLC,QAAAA,gBAAgB,EAAEnD,WAAW,CAACmD,gBAhCzB;AAiCLC,QAAAA,QAAQ,EAAEpD,WAAW,CAACoD,QAjCjB;AAmCLC,QAAAA,cAAc,EAAGrD,WAAW,CAACqD,cAnCxB;AAoCLC,QAAAA,cAAc,EAAGtD,WAAW,CAACsD,cApCxB;AAqCLC,QAAAA,UAAU,EAAGvD,WAAW,CAACuD,UArCpB;AAsCLC,QAAAA,YAAY,EAAGxD,WAAW,CAACwD,YAtCtB;AAuCLC,QAAAA,IAAI,EAAGzD,WAAW,CAACyD;AAvCd;AADM,KAAf;AA2CA;AACR;AACA;;AACQ,UAAM;AAAExD,MAAAA;AAAF,QAAa,MAAMf,EAAE,CACxBM,UADsB,CACX,aADW,EAEtBkE,SAFsB,CAEZvE,KAFY,EAELuC,MAFK,EAEG;AAACiC,MAAAA,MAAM,EAAC;AAAR,KAFH,CAAzB;;AAKE,QAAI1D,MAAJ,EAAY;AACV,aAAO;AACLqB,QAAAA,MAAM,EAAE,SADH;AAELf,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID,KALD,MAMK;AACH,aAAO;AACLe,QAAAA,MAAM,EAAE,OADH;AAELf,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;AAEN;;AAGD,iBAAe9B,QAAf,CAAyB;AAAE8C,IAAAA;AAAF,GAAzB,EAAiC;AAC7B,UAAMrC,EAAE,GAAG,MAAMd,QAAjB;AACA,UAAM8C,KAAK,GAAG,MAAMhC,EAAE,CACnBM,UADiB,CACN,aADM,EAEjB2B,OAFiB,CAET;AAAE/B,MAAAA,GAAG,EAAEF,EAAE,CAACI,MAAH,CAAUiC,EAAV;AAAP,KAFS,CAApB;;AAGA,QAAIL,KAAJ,EAAW;AACT,aAAOpB,qBAAqB,CAACoB,KAAD,CAA5B;AACD;;AACD,WAAO,IAAP;AACD;;AAEH,iBAAexC,WAAf,CAA4B;AAAEsC,IAAAA;AAAF,GAA5B,EAAuC;AACrC,UAAM9B,EAAE,GAAG,MAAMd,QAAjB;AACA,UAAM8C,KAAK,GAAG,MAAMhC,EAAE,CACnBM,UADiB,CACN,aADM,EAEjB2B,OAFiB,CAET;AAAEH,MAAAA,KAAK,EAAEA;AAAT,KAFS,CAApB;;AAGA,QAAIE,KAAJ,EAAW;AACTM,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,aAAO3B,qBAAqB,CAACoB,KAAD,CAA5B;AACD;;AACD,WAAO,IAAP;AACD;;AAED,iBAAevC,gBAAf,CAAiC;AAAEiF,IAAAA;AAAF,GAAjC,EAAkD;AAChD,UAAM1E,EAAE,GAAG,MAAMd,QAAjB;AACA,UAAM8C,KAAK,GAAG,MAAMhC,EAAE,CACnBM,UADiB,CACN,aADM,EAEjB2B,OAFiB,CAET;AAAE8B,MAAAA,gBAAgB,EAAEW;AAApB,KAFS,CAApB;;AAGA,QAAI1C,KAAJ,EAAW;AACT,aAAOpB,qBAAqB,CAACoB,KAAD,CAA5B;AACD;;AACD,WAAO,IAAP;AACD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGI,iBAAerC,kBAAf,CAAmC;AAAE+E,IAAAA;AAAF,GAAnC,EAAoD;AAClD,UAAM1E,EAAE,GAAG,MAAMd,QAAjB;AAEA,UAAM;AAAE6B,MAAAA;AAAF,QAAa,MAAMf,EAAE,CAACM,UAAH,CAAc,aAAd,EAA6BqE,UAA7B,CAAwC;AAAC,0BAAoBD;AAArB,KAAxC,CAAzB;AACA,WAAO;AACLhD,MAAAA,OAAO,EAAEX,MAAM,CAAC6D;AADX,KAAP;AAID;;AAED,WAAShE,qBAAT,CAAgC;AAAEV,IAAAA,GAAG,EAAEmC,EAAP;AAAW,OAAGwC;AAAd,GAAhC,EAAqD;AACnD,WAAO,yBAAgB;AAAExC,MAAAA,EAAF;AAAM,SAAGwC;AAAT,KAAhB,CAAP;AACD;AACJ","sourcesContent":["import makeSubscribers from './subscriber';\nimport sendSms from '../helpers/send-sms';\nimport { UniqueConstraintError } from '../helpers/errors';\n\nexport default function makeSubscribersQuery ({database}){\n    return Object.freeze ({\n        add,\n        verify, \n        findById,\n        findByPhone,\n        findByCustomerId,\n        getSubscribers, \n        deleteByCustomerId,\n        update\n    });\n\n    async function getSubscribers ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Subscribers')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToSubscribers)\n    }\n\n\n    async function add ({ subscribersId, ...subscribers }) {\n        const db = await database\n        if (subscribersId) {\n          subscribers._id = db.makeId(subscribersId);\n        }\n        const { result, ops } = await db\n          .collection('Subscribers')\n          .insertOne(subscribers)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToSubscribers(ops[0])\n        }\n    }\n\n  async function verify ({ surname, phone, email }) {\n    const db = await database\n    const found = await db\n      .collection('Subscribers')\n      .findOne({ phone:phone })\n    \n\n    if (found) {\n\n      const db2 = await database\n      const found2 = await db2\n        .collection('Subscribers')\n        .findOne({ surname:surname })\n\n        if (found2) {\n          sendSms(\"Your subscription has been submitted\", \"08121631789\");\n          return {\n            status: \"success\",\n            message: \"Reord found\"\n          };\n\n        } else {\n          \n          return {\n            status: \"no-surname-error\",\n            message: \"Phone no registered with another SURNAME already\"\n          };\n\n        }\n    }else {\n      \n      return {\n        status: \"no-phone-error\",\n        message: \"Phone no registered with another SURNAME already\"\n      };\n\n    }\n  }\n\n\n    async function update ({ id, ...subscribers }) {\n      console.log(\"Update query called \"+id);\n      console.log(subscribers);\n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n\n        const newSet = {\n          $set : {\n            surname: subscribers.surname, \n            othernames: subscribers.othernames, \n            gender: subscribers.gender, \n            bday: subscribers.bday, \n            bmonth: subscribers.bmonth, \n            byear: subscribers.byear, \n            email: subscribers.email, \n            phone: subscribers.phone, \n            status: subscribers.status, \n            address: subscribers.address, \n\n            office_income: subscribers.office_income, \n            office_email: subscribers.office_email, \n            office_phone: subscribers.office_phone, \n            office: subscribers.office, \n            office_payday: subscribers.office_payday,\n\n            loan_amount: subscribers.loan_amount, \n            loan_purpose: subscribers.loan_purpose, \n            loan_type: subscribers.loan_type, \n            loan_duration: subscribers.loan_duration, \n        \n            guarantor_name: subscribers.guarantor_name, \n            guarantor_home_address: subscribers.guarantor_home_address, \n            guarantor_office_address: subscribers.guarantor_office_address, \n            guarantor_phone: subscribers.guarantor_phone, \n            guarantor_monthly_income: subscribers.guarantor_monthly_income,\n            guarantor_collateral: subscribers.guarantor_collateral, \n\n            okra_customer_id: subscribers.okra_customer_id, \n            okra_salary_bank: subscribers.okra_salary_bank, \n            okra_num_account: subscribers.okra_num_account, \n            num_deal: subscribers.num_deal, \n\n            upload_id_card:  subscribers.upload_id_card, \n            upload_picture:  subscribers.upload_picture, \n            reg_status:  subscribers.reg_status, \n            offer_letter:  subscribers.offer_letter, \n            date:  subscribers.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Subscribers')\n          .updateOne(query, newSet, {upsert:true})\n          \n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n\n    async function findById ({ id }) {\n        const db = await database\n        const found = await db\n          .collection('Subscribers')\n          .findOne({ _id: db.makeId(id) })\n        if (found) {\n          return documentToSubscribers(found)\n        }\n        return null\n      }\n\n    async function findByPhone ({ phone }) {\n      const db = await database\n      const found = await db\n        .collection('Subscribers')\n        .findOne({ phone: phone })\n      if (found) {\n        console.log(\"found\");\n        return documentToSubscribers(found)\n      }\n      return null\n    }\n\n    async function findByCustomerId ({ customer_id }) {\n      const db = await database\n      const found = await db\n        .collection('Subscribers')\n        .findOne({ okra_customer_id: customer_id })\n      if (found) {\n        return documentToSubscribers(found)\n      }\n      return null\n    }\n\n    /*async function remove ({ subscribersId, ...subscribers}) {\n      const db = await database\n      if (subscribersId) {\n          subscribers._id = db.makeId(subscribersId)\n      }\n\n      const { result } = await db.collection('Subscribers').deleteMany(subscribers)\n      return result.n\n    }*/\n\n    async function deleteByCustomerId ({ customer_id }) {\n      const db = await database\n  \n      const { result } = await db.collection('Subscribers').deleteMany({\"okra_customer_id\": customer_id})\n      return {\n        success: result.n\n      }\n      \n    }\n\n    function documentToSubscribers ({ _id: id, ...doc }) {\n      return makeSubscribers({ id, ...doc })\n    }\n}"],"file":"subscriber-query.js"}