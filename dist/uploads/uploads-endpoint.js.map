{"version":3,"sources":["../../src/uploads/uploads-endpoint.js"],"names":["makeUploadsEndpointHandler","uploadsQuery","handle","httpRequest","method","postUploads","getUploads","deleteUpload","statusCode","errorMessage","id","queryParams","name","subscriber_id","max","before","after","undefined","result","findByName","headers","data","JSON","stringify","findBySubscriberId","findById","uploadsInfo","body","parse","uploads","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","deleteBySubscriberId"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeUploads from './uploads';\n\nexport default function makeUploadsEndpointHandler({uploadsQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postUploads(httpRequest)\n      \n            case 'GET':\n              return getUploads(httpRequest)\n\n            case 'DELETE':\n                return  deleteUpload(httpRequest)\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getUploads (httpRequest) {\n     \n      //const { id } = httpRequest.pathParams || {}\n      const { id } = httpRequest.queryParams || {}\n      const { name } = httpRequest.queryParams || {}\n      const { subscriber_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (name !== undefined){\n        const result = await uploadsQuery.findByName({ name })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (subscriber_id !== undefined ){\n        const result = await uploadsQuery.findBySubscriberId({ subscriber_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        const result = await uploadsQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await uploadsQuery.getUploads({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n    async function postUploads (httpRequest) {\n      let uploadsInfo = httpRequest.body\n      if (!uploadsInfo) {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. No POST body.'\n        })\n      }\n  \n      if (typeof httpRequest.body === 'string') {\n        try {\n          uploadsInfo = JSON.parse(uploadsInfo)\n        } catch {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. POST body must be valid JSON.'\n          })\n        }\n      }\n  \n      try {\n        const uploads = makeUploads(uploadsInfo);\n        const result = await uploadsQuery.add(uploads)\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 201,\n          data: JSON.stringify(result)\n        }\n      } catch (e) {\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n      }\n     \n    }\n\n    async function deleteUpload (httpRequest) {\n      //const { customer_id } = httpRequest.pathParams || {}\n      const { subscriber_id } = httpRequest.queryParams || {}\n      try {\n        const result = await uploadsQuery.deleteBySubscriberId({ subscriber_id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n  \n      }\n      \n    }\n}"],"file":"uploads-endpoint.js"}