{"version":3,"sources":["../../src/uploads/uploads-query.js"],"names":["makeUploadsQuery","database","Object","freeze","add","findById","findBySubscriberId","getUploads","deleteBySubscriberId","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToUploads","uploadId","upload","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","found","findOne","subscriber_id","deleteMany","n","doc"],"mappings":"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","sourcesContent":["import makeUploads from './uploads';\nimport { UniqueConstraintError } from '../helpers/errors';\n\nexport default function makeUploadsQuery ({database}){\n    return Object.freeze ({\n        add,\n        findById,\n        findBySubscriberId,\n        getUploads, \n        deleteBySubscriberId\n    });\n\n    async function getUploads ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Uploads')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToUploads)\n    }\n\n\n    async function add ({ uploadId, ...upload }) {\n        const db = await database\n        if (uploadId) {\n          upload._id = db.makeId(uploadId);\n        }\n        const { result, ops } = await db\n          .collection('Uploads')\n          .insertOne(upload)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToUploads(ops[0])\n        }\n    }\n\n  \n\n    async function findById ({ id }) {\n        const db = await database\n        const found = await db\n          .collection('Uploads')\n          .findOne({ _id: db.makeId(id) })\n        if (found) {\n          return documentToUploads(found)\n        }\n        return null\n      }\n\n    async function findBySubscriberId ({ subscriber_id } = {}) {\n      const db = await database;\n      const query = { subscriber_id: subscriber_id}\n  \n      return (await db\n      .collection('Uploads')\n      .find(query)\n      .toArray()).map(documentToUploads)\n    }\n\n    \n\n    async function deleteBySubscriberId ({ subscriber_id }) {\n      const db = await database\n  \n      const { result } = await db.collection('Uploads').deleteMany({\"subscriber_id\": subscriber_id})\n      return {\n        success: result.n\n      }\n      \n    }\n\n    function documentToUploads ({ _id: id, ...doc }) {\n      return makeUploads({ id, ...doc })\n    }\n}"],"file":"uploads-query.js"}