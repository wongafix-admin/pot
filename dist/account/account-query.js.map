{"version":3,"sources":["../../src/account/account-query.js"],"names":["makeAccountQuery","database","Object","freeze","add","findByCustomerId","findById","deleteByCustomerId","getAccount","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToAccount","accountId","account","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","customer_id","email","phone","bank","bank_logo","account_id","account_name","account_nuban","account_type","account_connected","date","updateOne","upsert","status","found","findOne","deleteMany","n","doc"],"mappings":"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","sourcesContent":["import makeAccount from './account'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeAccountQuery({database}){\n    return Object.freeze({\n        add,\n        findByCustomerId,\n        findById,\n        deleteByCustomerId,\n        getAccount,\n        //remove,\n        //replace,\n        update\n    });\n\n    async function getAccount ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Account')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToAccount)\n    }\n\n    \n    async function add ({ accountId, ...account }) {\n        const db = await database\n        if (accountId) {\n          account._id = db.makeId(accountId)\n        }\n        const { result, ops } = await db\n          .collection('Account')\n          .insertOne(account)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToAccount(ops[0])\n        }\n    }\n\n    async function update ({ id, ...account }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n        const newSet = {\n          $set : {\n            customer_id: account.customer_id,\n            email: account.email,\n            phone: account.phone,\n            bank: account.bank,\n            bank_logo: account.bank_logo,\n            account_id: account.account_id,\n            account_name: account.account_name,\n            account_nuban: account_nuban,\n            account_type: account.account_type,\n            account_connected: account_connected,\n            date: account.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Account')\n          .updateOne(query, newSet, {upsert:true})\n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Account')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToAccount(found)\n    }\n    return null\n  }\n\n  \n\n  async function findByCustomerId ({ customer_id } = {}) {\n    const db = await database;\n    const query = { customer_id: customer_id }\n\n    return (await db\n    .collection('Account')\n    .find(query)\n    .toArray()).map(documentToAccount)\n  }\n  \n\n  /*async function remove ({ accountId, ...account }) {\n    const db = await database\n    if (accountId) {\n        account._id = db.makeId(accountId)\n    }\n\n    const { result } = await db.collection('Account').deleteMany(account)\n    return result.n\n  }*/\n\n  async function deleteByCustomerId ({ customer_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Account').deleteMany({\"customer_id\": customer_id})\n    return {\n      success: result.n\n    }\n    \n  }\n\n\n  function documentToAccount ({ _id: id, ...doc }) {\n    return makeAccount({ id, ...doc })\n  }\n}"],"file":"account-query.js"}