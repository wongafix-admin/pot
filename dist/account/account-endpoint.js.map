{"version":3,"sources":["../../src/account/account-endpoint.js"],"names":["makeAccountEndpointHandler","accountQuery","handle","httpRequest","method","postAccount","getAccount","updateAccount","deleteAccount","statusCode","errorMessage","id","queryParams","customer_id","max","before","after","undefined","result","findByCustomerId","headers","data","JSON","stringify","findById","accountInfo","body","console","log","parse","account","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","bank","deleteByCustomerId"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeAccount from './account';\n\nexport default function makeAccountEndpointHandler({accountQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postAccount(httpRequest)\n      \n            case 'GET':\n              return getAccount(httpRequest)\n\n            case 'PUT':\n              return updateAccount(httpRequest)\n\n            case 'DELETE':\n              return deleteAccount(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getAccount (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { customer_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (customer_id !== undefined ){\n        const result = await accountQuery.findByCustomerId({ customer_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        const result = await accountQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await accountQuery.getAccount({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n    \n\n    async function postAccount (httpRequest) {\n        let accountInfo = httpRequest.body\n        console.log(accountInfo);\n        if (!accountInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            accountInfo = JSON.parse(accountInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const account = makeAccount(accountInfo)\n          const result = await accountQuery.add(account)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n  async function updateAccount (httpRequest) {\n    \n    let accountInfo = httpRequest.body\n    if (!accountInfo) {\n      return makeHttpError({\n        statusCode: 400,\n        errorMessage: 'Bad request. No POST body.'\n      })\n    }\n\n    if (typeof httpRequest.body === 'string') {\n      try {\n        accountInfo = JSON.parse(accountInfo)\n      } catch {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. POST body must be valid JSON.'\n        })\n      }\n    }\n\n    try {\n      const account = makeAccount(accountInfo);\n      const result = await accountQuery.update(account)\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 201,\n        data: JSON.stringify(result)\n      }\n    } catch (e) {\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n    }\n  }\n\n  async function deleteAccount (httpRequest) {\n    //const { customer_id } = httpRequest.pathParams || {}\n    const { customer_id } = httpRequest.queryParams || {}\n    const { bank } = httpRequest.queryParams || {}\n    \n    console.log(bank);\n    try {\n      const result = await accountQuery.deleteByCustomerId({ customer_id, bank })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n    }\n    catch (e){\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n\n    }\n    \n  }\n\n\n}"],"file":"account-endpoint.js"}