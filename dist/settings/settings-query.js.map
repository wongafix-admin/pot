{"version":3,"sources":["../../src/settings/settings-query.js"],"names":["makeSettingsQuery","database","Object","freeze","add","findById","deleteById","getSettings","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToSettings","settingsId","settings","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","category","rate","date","updateOne","upsert","status","found","findOne","deleteMany","n","doc"],"mappings":"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","sourcesContent":["import makeSettings from './settings'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeSettingsQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        deleteById,\n        getSettings,\n        update\n    });\n\n    async function getSettings ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Settings')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToSettings)\n    }\n\n    \n    async function add ({ settingsId, ...settings }) {\n        const db = await database\n        if (settingsId) {\n          settings._id = db.makeId(settingsId)\n        }\n        const { result, ops } = await db\n          .collection('Settings')\n          .insertOne(settings)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToSettings(ops[0])\n        }\n    }\n\n    async function update ({ id, ...settings }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n        const newSet = {\n          $set : {\n            category: settings.category,\n            rate: settings.rate,\n            date: settings.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Settings')\n          .updateOne(query, newSet, {upsert:true})\n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Settings')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToSettings(found)\n    }\n    return null\n  }\n\n\n  async function deleteById ({ id }) { \n    const db = await database\n\n    const { result } = await db.collection('Settings').deleteMany({\"_id\": db.makeId(id)})\n    return {\n      success: result.n\n    }\n    \n  }\n\n  function documentToSettings ({ _id: id, ...doc }) {\n    return makeSettings({ id, ...doc })\n  }\n}"],"file":"settings-query.js"}