{"version":3,"sources":["../../src/deal/deal-query.js"],"names":["makeDealQuery","database","Object","freeze","add","findByCustomerId","findById","getDeals","deleteByCustomerId","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToDeal","dealId","deal","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","deals","newSet","$set","surname","othernames","customer_id","phone","email","loan_amount","loan_monthly_payable","loan_due_date","last_month_paid","last_year_paid","office","office_phone","office_email","guarantor_name","guarantor_home_address","guarantor_office_address","guarantor_phone","guarantor_monthly_income","guarantor_collateral","salary_bank","num_account","upload_id_card","pay_status","status","date","updateOne","upsert","found","findOne","deleteMany","n","deleteOne","console","log","deletedCount","doc"],"mappings":"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","sourcesContent":["import makeDeal from './deal'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeDealQuery({database}){\n    return Object.freeze({\n        add,\n        findByCustomerId,\n        findById,\n        getDeals,\n        deleteByCustomerId,\n        deleteById,\n        update\n    });\n\n    async function getDeals ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Deal')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToDeal)\n    }\n\n\n    async function add ({ dealId, ...deal }) {\n        const db = await database\n        if (dealId) {\n          deal._id = db.makeId(dealId)\n        }\n        const { result, ops } = await db\n          .collection('Deal')\n          .insertOne(deal)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToDeal(ops[0])\n        }\n    }\n\n    async function update ({ id, ...deals }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n        const newSet = {\n          $set : {\n\n            surname: deals.surname,\n            othernames: deals.othernames,\n            customer_id: deals.customer_id,\n            phone: deals.phone,\n            email: deals.email,\n            loan_amount: deals.loan_amount,\n            loan_monthly_payable: deals.loan_monthly_payable,\n            loan_due_date: deals.loan_due_date,\n            last_month_paid: deals.last_month_paid,\n            last_year_paid: deals.last_year_paid,\n\n            office: deals.office,\n            office_phone: deals.office_phone,\n            office_email: deals.office_email, \n            \n            guarantor_name: deals.guarantor_name,\n            guarantor_home_address: deals.guarantor_home_address,\n            guarantor_office_address: deals.guarantor_office_address,\n            guarantor_phone: deals.guarantor_phone,\n            guarantor_monthly_income: deals.guarantor_monthly_income,\n            guarantor_collateral: deals.guarantor_collateral,\n            \n            salary_bank: deals.salary_bank,\n            num_account: deals.num_account,\n\n            upload_id_card: deals.upload_id_card,\n\n            pay_status: deals.pay_status,\n            status: deals.status,\n            date: deals.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Deal')\n          .updateOne(query, newSet, {upsert:true})\n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Deal')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToDeal(found)\n    }\n    return null\n  }\n\n  async function findByCustomerId ({ customer_id }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Deal')\n      .find({ customer_id: customer_id })\n      .toArray()).map(documentToDeal)\n  }\n\n  async function deleteByCustomerId ({ customer_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Deal').deleteMany({\"customer_id\": customer_id})\n    return {\n      success: result.n\n    }\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Deal').deleteOne({\"_id\": db.makeId(id)})\n    console.log(result);\n    if (result.deletedCount > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToDeal ({ _id: id, ...doc }) {\n    return makeDeal({ id, ...doc })\n  }\n}"],"file":"deal-query.js"}