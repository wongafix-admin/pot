{"version":3,"sources":["../../src/deal/deal-endpoint.js"],"names":["makeDealEndpointHandler","dealQuery","handle","httpRequest","method","postDeal","getDeal","updateDeal","statusCode","errorMessage","id","queryParams","customer_id","max","before","after","undefined","result","findByCustomerId","headers","data","JSON","stringify","findById","getDeals","dealInfo","body","parse","deal","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","dealsInfo","deals","makeDeals","update"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeDeal from './deal';\n\nexport default function makeDealEndpointHandler({dealQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postDeal(httpRequest)\n      \n            case 'GET':\n              return getDeal(httpRequest)\n\n            case 'PUT':\n              return updateDeal(httpRequest)\n      \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getDeal (httpRequest) {\n\n      const { id } = httpRequest.queryParams || {}\n      const { customer_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (customer_id !== undefined ){\n        const result = await dealQuery.findByCustomerId({ customer_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        const result = await dealQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await dealQuery.getDeals({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n    \n\n    async function postDeal (httpRequest) {\n        let dealInfo = httpRequest.body\n        if (!dealInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            dealInfo = JSON.parse(dealInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const deal = makeDeal(dealInfo)\n          const result = await dealQuery.add(deal)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n  async function updateDeal (httpRequest) {\n    \n    let dealsInfo = httpRequest.body\n    if (!dealsInfo) {\n      return makeHttpError({\n        statusCode: 400,\n        errorMessage: 'Bad request. No POST body.'\n      })\n    }\n\n    if (typeof httpRequest.body === 'string') {\n      try {\n        dealsInfo = JSON.parse(dealsInfo)\n      } catch {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. POST body must be valid JSON.'\n        })\n      }\n    }\n\n    try {\n      const deals = makeDeals(dealsInfo);\n      const result = await dealQuery.update(deals)\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 201,\n        data: JSON.stringify(result)\n      }\n    } catch (e) {\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n    }\n  }\n\n}"],"file":"deal-endpoint.js"}