{"version":3,"sources":["../../src/admin/admin-query.js"],"names":["require","config","jwt","bcrypt","makeAdminQuery","database","Object","freeze","add","getAdmin","findById","findByEmail","auth","reset","remove","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToAdmin","adminId","admin","console","log","password","hashSync","found","findOne","email","status","message","result","ops","insertOne","catch","mongoError","errorCode","split","_","mongoIndex","UniqueConstraintError","passwordValid","compare","token","sign","process","env","JWT_SECRET","expiresIn","user","department","name","id","newSet","$set","phone","date","updateOne","upsert","deleteMany","n","doc"],"mappings":"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","sourcesContent":["require('dotenv').config();\nimport makeAdmin from './admin'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nexport default function makeAdminQuery({database}){\n    return Object.freeze({\n        add,\n        getAdmin,\n        findById,\n        findByEmail,\n        auth,\n        reset,\n        remove\n    });\n\n    async function getAdmin ({ max = 100, before, after } = {}) {\n      \n      const db = await database;\n      const query = {}\n      if (before || after) {\n      query._id = {}\n      query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n      query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n      }\n\n      return (await db\n      .collection('Admin')\n      .find(query)\n      .limit(Number(max))\n      .toArray()).map(documentToAdmin)\n    }\n\n    async function add ({ adminId, ...admin}) {\n      console.log(\"Admin called\");\n        const db = await database\n        if (adminId) {\n          admin._id = db.makeId(adminId)\n        }\n        admin.password = bcrypt.hashSync(admin.password, 10);\n\n        const found = await db\n          .collection('Admin')\n          .findOne({ email: admin.email })\n\n        if (found) {\n          return {\n            status: \"Error\",\n            message: \"Email already exist\"\n          };\n        }\n\n        const { result, ops } = await db\n          .collection('Admin')\n          .insertOne(admin)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n          status: \"Success\",\n          message: \"Admin staff created\"\n        }\n    }\n\n    async function auth ({ email, password }) {\n        const db = await database\n        const found = await db\n          .collection('Admin')\n          .findOne({ email: email })\n        \n\n        if (found) {\n            const passwordValid = await bcrypt.compare(password, found.password);\n            console.log(passwordValid);\n            if (passwordValid){\n               \n                const token = jwt.sign({ password: password }, process.env.JWT_SECRET, {\n                    expiresIn: '1d'\n                });\n                return {\n                    token: token,\n                    status: \"Login Successful\",\n                    user: {\n                      \"email\": found.email,\n                      \"department\": found.department,\n                      \"name\": found.name\n                    }\n                };\n            }\n            else {\n                return {\n                    token: \"Nil\",\n                    status: \"Password not match\"\n                };\n            }\n            \n        }\n        else {\n            return {\n                token: \"Nil\",\n                status :\"Email not found\"\n            }\n            \n        }\n       \n    }\n\n    async function reset ({ id, ...admin }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n\n        const newSet = {\n          $set : {\n            email: admin.email, \n            password: bcrypt.hashSync(admin.password, 10),\n            name: admin.name,  \n            phone: admin.phone, \n            department: admin.department, \n            date:admin.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Admin')\n          .updateOne(query, newSet, {upsert:true})\n          \n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Reset successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n    async function findById ({ adminId }) {\n      const db = await database\n      const found = await db\n        .collection('Admin')\n        .findOne({ id: adminId })\n      if (found) {\n        return documentToAdmin(found)\n      }\n      return null\n    }\n\n  async function findByEmail ({ email }) {\n    const db = await database\n    const found = await db\n      .collection('Admin')\n      .findOne({ email: email })\n    if (found) {\n      console.log(\"found\");\n      return documentToAdmin(found)\n    }\n    return null\n  }\n\n    async function remove ({ adminId, ...admin }) {\n      const db = await database\n      if (adminId) {\n          admin._id = db.makeId(adminId)\n      }\n\n      const { result } = await db.collection('Admin').deleteMany(admin)\n      return result.n\n    }\n\n    function documentToAdmin ({ _id: id, ...doc }) {\n      return makeAdmin({ id, ...doc })\n    }\n}"],"file":"admin-query.js"}