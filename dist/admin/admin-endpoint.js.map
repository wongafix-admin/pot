{"version":3,"sources":["../../src/admin/admin-endpoint.js"],"names":["makeAdminEndpointHandler","adminQuery","handle","httpRequest","method","postAdmin","getAdmin","statusCode","errorMessage","id","queryParams","email","max","before","after","undefined","result","findByEmail","headers","data","JSON","stringify","findById","adminInfo","body","parse","path","admin","auth","console","log","reset","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeAdmin from './admin';\n\nexport default function makeAdminEndpointHandler({adminQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postAdmin(httpRequest)\n      \n            case 'GET':\n              return getAdmin(httpRequest)\n          \n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getAdmin (httpRequest) {\n\n      const { id } = httpRequest.queryParams || {}\n      const { email } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (email !== undefined){\n        const result = await adminQuery.findByEmail({ email })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        const result = await adminQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await adminQuery.getAdmin({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n\n    }\n\n    async function postAdmin (httpRequest) {\n        let adminInfo = httpRequest.body\n        if (!adminInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            adminInfo = JSON.parse(adminInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n           \n          if (httpRequest.path == '/admin/auth'){\n            const admin = makeAdmin(adminInfo);\n            const result = await adminQuery.auth(admin);\n            console.log(JSON.stringify(result))\n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          else if (httpRequest.path == '/admin/reset'){\n            const admin = makeAdmin(adminInfo);\n            const result = await adminQuery.reset(admin);\n            console.log(JSON.stringify(result))\n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          else {\n            const admin = makeAdmin(adminInfo);\n            const result = await adminQuery.add(admin);\n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          \n          \n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n}"],"file":"admin-endpoint.js"}