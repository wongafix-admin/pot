{"version":3,"sources":["../../src/client/client-query.js"],"names":["makeClientQuery","database","Object","freeze","add","findByCustomerId","findById","getClients","remove","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToClient","clientId","client","client_id","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","console","log","found","findOne","customer_id","okra_customer_id","id","newSet","$set","surname","othernames","gender","bday","bmonth","byear","email","phone","marital","address","office","office_phone","office_email","office_income","office_payday","upload_id_card","num_deal","password","oripass","status","date","updateOne","upsert","deleteMany","n","doc"],"mappings":"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","sourcesContent":["import makeClient from './client'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeClientQuery({database}){\n    return Object.freeze({\n        add,\n        findByCustomerId,\n        findById,\n        getClients,\n        remove,\n        update\n    });\n\n    async function getClients ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {};\n        if (before || after) {\n            query._id = {}\n            query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n            query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Client')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToClient)\n    }\n\n\n    async function add ({ clientId, ...client }) {\n        const db = await database\n        if (clientId) {\n          client_id = db.makeId(clientId)\n        }\n        const { result, ops } = await db\n          .collection('Client')\n          .insertOne(client)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToClient(ops[0])\n        }\n    } \n\n    async function findById ({ clientId }) {\n      console.log((\"Find by id called\"));\n      const db = await database\n      const found = await db\n        .collection('Client')\n        .findOne({ _id: db.makeId(clientId) })\n      if (found) {\n        return documentToClient(found)\n      }\n      return null\n    }\n\n\n  async function findByCustomerId ({ customer_id }) {\n    const db = await database\n    const found = await db\n      .collection('Client')\n      .findOne({ okra_customer_id: customer_id })\n    if (found) {\n      console.log(\"found\");\n      return documentToClient(found)\n    }\n    return null\n  }\n\n\n  async function update ({ id, ...client }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n      const newSet = {\n        $set : {\n          surname: client.surname, \n          othernames: client.othernames,\n          gender: client.gender,\n          bday: client.bday,\n          bmonth: client.bmonth,\n          byear: client.byear,\n          email: client.email,\n          phone: client.phone,\n          marital: client.marital,\n          address: client.address,\n\n          office: client.office,\n          office_phone: client.office_phone,\n          office_email: client.office_email,\n          office_income: client.office_income,\n          office_payday: client.office_payday,\n\n          upload_id_card: client.upload_id_card,\n\n          okra_customer_id: client.okra_customer_id,\n          num_deal: client.num_deal,\n          password: client.password,\n          oripass: client.oripass,\n          status: client.status,\n          date:  client.date\n\n          /*guarantor_name: client.guarantor_name,\n          guarantor_home_address: client.guarantor_home_address,\n          guarantor_office_address:client.guarantor_office_address,\n          guarantor_phone: client.guarantor_phone,*/\n\n          \n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Client')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n    async function remove ({ clientId, ...client }) {\n        const db = await database\n        if (clientId) {\n            client._id = db.makeId(clientId)\n        }\n\n        const { result } = await db.collection('Client').deleteMany(client)\n        return result.n\n    }\n\n    function documentToClient ({ _id: id, ...doc }) {\n        return makeClient({ id, ...doc })\n    }\n}"],"file":"client-query.js"}