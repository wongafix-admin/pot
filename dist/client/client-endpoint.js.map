{"version":3,"sources":["../../src/client/client-endpoint.js"],"names":["makeClientEndpointHandler","clientQuery","handle","httpRequest","method","postClient","getClient","updateClient","deleteClient","statusCode","errorMessage","id","queryParams","customer_id","max","before","after","undefined","result","findByCustomerId","headers","data","JSON","stringify","findById","getClients","clientInfo","body","parse","client","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","deleteByCustomerId"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeClient from './client';\n\nexport default function makeClientEndpointHandler({clientQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postClient(httpRequest)\n      \n            case 'GET':\n              return getClient(httpRequest)\n      \n            case 'PUT':\n              return updateClient(httpRequest)\n\n            case 'DELETE':\n              return deleteClient(httpRequest)\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getClient (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { customer_id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (customer_id !== undefined ){\n        const result = await clientQuery.findByCustomerId({ customer_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        const result = await clientQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await clientQuery.getClients({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n\n    async function postClient (httpRequest) {\n        let clientInfo = httpRequest.body\n        if (!clientInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            clientInfo = JSON.parse(clientInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const client = makeClient(clientInfo)\n          const result = await clientQuery.add(client)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n  async function updateClient (httpRequest) {\n  \n    let clientInfo = httpRequest.body\n    if (!clientInfo) {\n      return makeHttpError({\n        statusCode: 400,\n        errorMessage: 'Bad request. No POST body.'\n      })\n    }\n\n    if (typeof httpRequest.body === 'string') {\n      try {\n        clientInfo = JSON.parse(clientInfo)\n      } catch {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. POST body must be valid JSON.'\n        })\n      }\n    }\n\n    try {\n      const client = makeClient(clientInfo);\n      const result = await clientQuery.update(client)\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 201,\n        data: JSON.stringify(result)\n      }\n    } catch (e) {\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n    }\n  }\n\n  async function deleteClient (httpRequest) {\n    //const { customer_id } = httpRequest.pathParams || {}\n    const { customer_id } = httpRequest.queryParams || {}\n    \n    try {\n      const result = await clientQuery.deleteByCustomerId({ customer_id })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n    }\n    catch (e){\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n\n    }\n    \n  }\n\n\n}"],"file":"client-endpoint.js"}