{"version":3,"sources":["../../src/bank/bank-query.js"],"names":["makeBankQuery","database","Object","freeze","add","findByCustomerId","findById","getBank","deleteByCustomerId","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToBank","bankId","bank","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","customer_id","email","account","phone","bank_logo","account_id","account_name","account_nuban","account_type","account_connected","date","updateOne","upsert","status","found","findOne","deleteMany","n","doc"],"mappings":"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","sourcesContent":["import makeBank from './bank'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeBankQuery({database}){\n    return Object.freeze({\n        add,\n        findByCustomerId,\n        findById,\n        getBank,\n        deleteByCustomerId,\n        update\n    });\n\n    async function getBank ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Bank')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToBank)\n    }\n\n    \n    async function add ({ bankId, ...bank }) {\n        const db = await database\n        if (bankId) {\n          bank._id = db.makeId(bankId)\n        }\n        const { result, ops } = await db\n          .collection('Bank')\n          .insertOne(bank)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n            success: result.ok === 1,\n            created: documentToBank(ops[0])\n        }\n    }\n\n    async function update ({ id, ...bank }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n        const newSet = {\n          $set : {\n            customer_id: bank.customer_id,\n            email: account.email,\n            phone: account.phone,\n            bank: account.bank,\n            bank_logo: account.bank_logo,\n            account_id: account.account_id,\n            account_name: account.account_name,\n            account_nuban: account_nuban,\n            account_type: account.account_type,\n            account_connected: account_connected,\n            date: account.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Bank')\n          .updateOne(query, newSet, {upsert:true})\n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Bank')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToBank(found)\n    }\n    return null\n  }\n\n  /*async function findByCustomerId ({ customer_id }) {\n    const db = await database\n    const found = await db\n      .collection('Account')\n      .findOne({ customer_id: customer_id })\n    if (found) {\n      console.log(\"found\");\n      return documentToAccount(found)\n    }\n    return null\n  }*/\n\n  async function findByCustomerId ({ customer_id } = {}) {\n    const db = await database;\n    const query = { customer_id: customer_id }\n\n    return (await db\n    .collection('Bank')\n    .find(query)\n    .toArray()).map(documentToBank)\n  }\n  \n\n  async function deleteByCustomerId ({ customer_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Bank').deleteMany({\"customer_id\": customer_id})\n    return {\n      success: result.n\n    }\n  }\n\n  function documentToBank ({ _id: id, ...doc }) {\n    return makeBank({ id, ...doc })\n  }\n}"],"file":"bank-query.js"}