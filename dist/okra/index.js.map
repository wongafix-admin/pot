{"version":3,"sources":["../../src/okra/index.js"],"names":["fetch","require","okraCrons","dd","Date","today","getDate","sDay","eDay","getDeals","deals","db","collection","find","loan_due_date","$gt","$lt","pay_status","status","$not","toArray","deal","accounts","customer_id","account","balance","method","headers","Accept","Authorization","body","JSON","stringify","account_id","balRes","json","timeout","balance_callback","callback_url","callbackRes","available_balance","loan_monthly_payable","pay","account_to_debit","amount","currency","payRes","monthNames","d","trans","surname","othernames","email","phone","payment_id","data","payment","id","paid_month","getMonth","paid_year","getFullYear","bank","account_name","account_type","date","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","ms","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import makeHttpError from '../helpers/http-error';\nimport Okra from 'okra-js'\n\nconst fetch = require('node-fetch');\n\n\nexport default function okraCrons () {\n    \n    //get the deal for the defaulters\n    //check the account associated with each deal for more than amount\n    //initiate payment on account\n    //register transaction\n    const dd = new Date();\n    const today = dd.getDate();\n    const sDay = today - 2;\n    const eDay = today + 5;\n\n    getDeals();\n\n    async function getDeals(){\n\n        const deals = await db\n                .collection('Deal')\n                .find({loan_due_date: { $gt : sDay , $lt : eDay } }, {pay_status: 'Unpaid'}, {status: {$not: 'Completed'}})\n                .toArray();\n\n        for (const deal of deals) {\n          const accounts = await db.collection('Account')\n                          .find({customer_id: deal.customer_id})\n                          .toArray();\n\n          for (const account of accounts){\n            //okra check balance\n            // data to be sent to the POST request\n            \n            const balance = await fetch('https://api.okra.ng/v2/balance/refresh', {\n                                    method: 'POST',\n                                    headers: {\n                                      Accept: 'application/json; charset=utf-8',\n                                      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDc2ZWU3Mjc4ZGUwZjExZDVkMWJlMGIiLCJpYXQiOjE2MTg0MDcwMjd9.Q-R0qocVPKnCZHtpGigsTtoN-MVlUIhZ9LsSrW7VCsM',\n                                      'Content-Type': 'application/json'\n                                    },\n                                    body: JSON.stringify({account_id: account.account_id})\n                                  })\n\n            const balRes = await balance.json();\n            await timeout(6000);\n\n            const balance_callback = await fetch(balRes.callback_url, {\n                                            method: 'POST',\n                                            headers: {\n                                              Accept: 'application/json; charset=utf-8',\n                                              Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDc2ZWU3Mjc4ZGUwZjExZDVkMWJlMGIiLCJpYXQiOjE2MTg0MDcwMjd9.Q-R0qocVPKnCZHtpGigsTtoN-MVlUIhZ9LsSrW7VCsM',\n                                              'Content-Type': 'application/json'\n                                            }\n                                          })\n\n            const callbackRes = await balance_callback.json();\n\n            if (callbackRes.available_balance >= deal.loan_monthly_payable){\n\n              const pay = await fetch('https://api.okra.ng/v2/pay/initiate', {\n                          method: 'POST',\n                          headers: {\n                            Accept: 'application/json; charset=utf-8',\n                            Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDc2ZWU3Mjc4ZGUwZjExZDVkMWJlMGIiLCJpYXQiOjE2MTg0MDcwMjd9.Q-R0qocVPKnCZHtpGigsTtoN-MVlUIhZ9LsSrW7VCsM',\n                            'Content-Type': 'application/json'\n                          },\n                          body: JSON.stringify({\n                            account_to_debit: account.account_id, \n                            amount: deal.loan_monthly_payable * 100, \n                            currency: 'NGN'\n                          })\n                        })\n              const payRes = await pay.json();\n\n              //create transaction in db\n\n              const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n              const d = new Date();\n\n              const trans = {\n\n                surname: deal.surname,\n                othernames: deal.othernames,\n                email: deal.email,\n                phone: deal.phone,\n                customer_id: deal.customer_id,\n                payment_id: payRes.data.payment.id,\n                amount: deal.loan_monthly_payable,\n                paid_month: monthNames[d.getMonth()],\n                paid_year: d.getFullYear(),\n                bank: account.bank,\n                account_id: account.account_id,\n                account_name: account.account_name,\n                account_type: account.account_type,\n                status: 'Paid',\n                date: new Date\n\n              }\n\n              await db.collection('Transaction')\n                    .insertOne(trans)\n                    .catch(mongoError => {\n                      const [errorCode] = mongoError.message.split(' ')\n                      if (errorCode === 'E11000') {\n                        const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n                        throw new UniqueConstraintError(\n                          \n                        )\n                      }\n                      throw mongoError\n                    });\n              break;\n            }\n\n          }\n        }\n\n    }\n    \n\n    function timeout(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    \n}"],"file":"index.js"}