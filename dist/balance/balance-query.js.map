{"version":3,"sources":["../../src/balance/balance-query.js"],"names":["makeBalanceQuery","database","Object","freeze","add","findByCustomerId","findById","getBalance","deleteByCustomerId","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToBalance","balanceId","balance","console","log","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","success","ok","created","id","newSet","$set","customer_id","email","phone","bank","bank_logo","account_id","available_balance","nuban","ledger_balance","account_name","account_status","account_type","connected","date","updateOne","upsert","status","found","findOne","deleteMany","n","doc"],"mappings":"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","sourcesContent":["import makeBalance from './balance'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeBalanceQuery({database}){\n    return Object.freeze({\n        add,\n        findByCustomerId,\n        findById,\n        getBalance,\n        //remove,\n        deleteByCustomerId,\n        update\n    });\n\n    async function getBalance ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Balance')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToBalance)\n    }\n\n\n    async function add ({ balanceId, ...balance }) {\n      console.log(\"Query balance called\");\n      const db = await database\n      \n      if (balanceId) {\n        balance._id = db.makeId(balanceId)\n      }\n      const { result, ops } = await db\n        .collection('Balance')\n        .insertOne(balance)\n        .catch(mongoError => {\n          const [errorCode] = mongoError.message.split(' ')\n          if (errorCode === 'E11000') {\n            const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n            throw new UniqueConstraintError(\n              //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n            )\n          }\n          throw mongoError\n        })\n      return {\n          success: result.ok === 1,\n          created: documentToBalance(ops[0])\n      }\n\n    }\n\n    async function update ({ id, ...balance }) {\n      \n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n        \n        const newSet = {\n          $set : {\n            customer_id: balance.customer_id,\n            email: balance.email,\n            phone: balance.phone,\n            bank: balance.bank,\n            bank_logo: balance.bank_logo,\n\n            account_id: balance.account_id,\n            available_balance: balance.available_balance,\n            nuban: balance.nuban,\n            ledger_balance: balance.ledger_balance,\n            account_name: balance.account_name,\n            account_status: balance.account_status,\n            account_type: balance.account_type,\n            connected: balance.connected,\n            date: balance.date\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Balance')\n          .updateOne(query, newSet, {upsert:true})\n\n          if (result) {\n            return {\n              status: \"success\",\n              message: \"Updated successfully\"\n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Balance')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToBalance(found)\n    }\n    return null\n  }\n\n  /*async function findByCustomerId ({ customer_id }) {\n    const db = await database\n    const found = await db\n      .collection('Balance')\n      .findOne({ customer_id: customer_id })\n    if (found) {\n      console.log(\"found\");\n      return documentToBalance(found)\n    }\n    return null\n  }*/\n\n  async function findByCustomerId ({ customer_id } = {}) {\n    const db = await database;\n    const query = { customer_id: customer_id }\n\n    return (await db\n    .collection('Balance')\n    .find(query)\n    .toArray()).map(documentToBalance)\n  }\n\n\n\n  async function deleteByCustomerId ({ customer_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Balance').deleteMany({\"customer_id\": customer_id})\n    return {\n      success: result.n\n    }\n    \n  }\n\n\n  function documentToBalance ({ _id: id, ...doc }) {\n    return makeBalance({ id, ...doc })\n  }\n}"],"file":"balance-query.js"}