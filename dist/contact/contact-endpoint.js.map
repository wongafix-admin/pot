{"version":3,"sources":["../../src/contact/contact-endpoint.js"],"names":["makeContactEndpointHandler","contactQuery","handle","httpRequest","method","postContact","getContact","deleteContact","statusCode","errorMessage","id","queryParams","max","before","after","undefined","result","findById","headers","data","JSON","stringify","contactInfo","body","parse","contact","add","console","log","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","deleteById"],"mappings":"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","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeContact from './contact';\n\nexport default function makeContactEndpointHandler({contactQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postContact(httpRequest)\n      \n            case 'GET':\n              return getContact(httpRequest)\n\n            case 'DELETE':\n              return deleteContact(httpRequest)\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getContact (httpRequest) {\n      const { id } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (id !== undefined ){\n        const result = await contactQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await contactQuery.getContact({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n\n\n    async function postContact (httpRequest) {\n        let contactInfo = httpRequest.body\n        \n        if (!contactInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            contactInfo = JSON.parse(contactInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const contact = makeContact(contactInfo)\n          const result = await contactQuery.add(contact)\n          console.log(\"result returned\")\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n \n  async function deleteContact (httpRequest) {\n    //const { customer_id } = httpRequest.pathParams || {}\n    const { id } = httpRequest.queryParams || {}\n    \n    try {\n      const result = await contactQuery.deleteById({ id })\n\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 200,\n        data: JSON.stringify(result)\n      }\n    }\n    catch (e){\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n\n    }\n    \n  }\n\n\n}"],"file":"contact-endpoint.js"}